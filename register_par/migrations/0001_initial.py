# Generated by Django 5.2.6 on 2025-09-25 18:16

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Arbitros',
            fields=[
                ('idArb', models.AutoField(primary_key=True, serialize=False)),
                ('nomArb', models.CharField(max_length=50, verbose_name='Nombre del árbitro.')),
                ('telArb', models.CharField(max_length=9, verbose_name='Teléfono del árbitro.')),
                ('conArb', models.EmailField(max_length=75, verbose_name='Contacto del árbitro.')),
            ],
            options={
                'verbose_name': 'Árbitro',
                'verbose_name_plural': 'Árbitros',
                'db_table': 'ARBITROS',
            },
        ),
        migrations.CreateModel(
            name='Disciplinas',
            fields=[
                ('idDis', models.AutoField(primary_key=True, serialize=False)),
                ('nomDis', models.CharField(max_length=50, verbose_name='Nombre de la disciplina.')),
            ],
            options={
                'verbose_name': 'Disciplina',
                'verbose_name_plural': 'Disciplinas',
                'db_table': 'DISCIPLINAS',
            },
        ),
        migrations.CreateModel(
            name='Encuentros',
            fields=[
                ('idEnc', models.AutoField(primary_key=True, serialize=False)),
                ('finiEnc', models.DateTimeField(verbose_name='Fecha de inicio.')),
                ('ffinEnc', models.DateTimeField(verbose_name='Fecha de fin.')),
                ('arbitro', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='register_par.arbitros', verbose_name='Árbitro del encuentro')),
                ('idDis', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='register_par.disciplinas', verbose_name='Disciplina')),
            ],
            options={
                'verbose_name': 'Encuentro',
                'verbose_name_plural': 'Encuentros',
                'db_table': 'ENCUENTROS',
            },
        ),
        migrations.CreateModel(
            name='EncuentroEquipo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rol', models.CharField(choices=[('L', 'Local'), ('V', 'Visitante')], max_length=1, verbose_name='Rol del equipo')),
                ('encuentro', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='register_par.encuentros')),
            ],
            options={
                'verbose_name': 'Equipo del Encuentro',
                'verbose_name_plural': 'Equipos de Encuentros',
                'db_table': 'ENCUENTRO_EQUIPO',
            },
        ),
        migrations.CreateModel(
            name='Equipos',
            fields=[
                ('idEqu', models.AutoField(primary_key=True, serialize=False)),
                ('nomEqu', models.CharField(max_length=25, verbose_name='Nombre del equipo.')),
                ('oliEqu', models.CharField(choices=[('S', 'Sí'), ('N', 'No')], max_length=1, verbose_name='¿Es olímpico?')),
            ],
            options={
                'verbose_name': 'Equipo',
                'verbose_name_plural': 'Equipos',
                'db_table': 'EQUIPOS',
                'constraints': [models.CheckConstraint(condition=models.Q(('oliEqu__in', ['S', 'N'])), name='check_oliEqu')],
            },
        ),
        migrations.AddField(
            model_name='encuentros',
            name='equipos',
            field=models.ManyToManyField(through='register_par.EncuentroEquipo', to='register_par.equipos', verbose_name='Equipos participantes'),
        ),
        migrations.AddField(
            model_name='encuentroequipo',
            name='equipo',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='register_par.equipos'),
        ),
        migrations.CreateModel(
            name='Participantes',
            fields=[
                ('idPar', models.AutoField(primary_key=True, serialize=False)),
                ('curPar', models.CharField(max_length=5, verbose_name='Curso del participante.')),
                ('fecPar', models.DateField(verbose_name='Fecha de nacimiento del participante.')),
                ('nomPar', models.CharField(max_length=75, verbose_name='Nombre del participante.')),
                ('telPar', models.CharField(max_length=9, verbose_name='Teléfono del participante.')),
                ('conPar', models.EmailField(max_length=75, verbose_name='Contacto del participante.')),
                ('equipo', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='register_par.equipos', verbose_name='Equipo al que pertenece')),
            ],
            options={
                'verbose_name': 'Participante',
                'verbose_name_plural': 'Participantes',
                'db_table': 'PARTICIPANTES',
            },
        ),
        migrations.CreateModel(
            name='Pistas',
            fields=[
                ('idPis', models.AutoField(primary_key=True, serialize=False)),
                ('nomPis', models.CharField(max_length=25, verbose_name='Nombre de la pista.')),
                ('cubPis', models.CharField(choices=[('S', 'Sí'), ('N', 'No')], max_length=1, verbose_name='¿Está cubierta?')),
            ],
            options={
                'verbose_name': 'Pista',
                'verbose_name_plural': 'Pistas',
                'db_table': 'PISTAS',
                'constraints': [models.CheckConstraint(condition=models.Q(('cubPis__in', ['S', 'N'])), name='check_cubPis')],
            },
        ),
        migrations.AddField(
            model_name='encuentros',
            name='idPis',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='register_par.pistas', verbose_name='Pista'),
        ),
        migrations.AlterUniqueTogether(
            name='encuentroequipo',
            unique_together={('encuentro', 'equipo')},
        ),
        migrations.AddConstraint(
            model_name='encuentros',
            constraint=models.CheckConstraint(condition=models.Q(('ffinEnc__gt', models.F('finiEnc'))), name='check_fechas_encuentro'),
        ),
    ]
